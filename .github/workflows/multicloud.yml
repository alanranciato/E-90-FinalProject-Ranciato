# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon App Runner and Google Cloud Run

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ranciato-e90           # set this to your Amazon ECR repository name
  GCP_REPOSITORY: ranciato-e90           # set this to your GCP Artifact Registry repository name
  GCP_REGISTRY: us-east4-docker.pkg.dev/ranciato-e90-final-project           # set this to your GCP Artifact Registry name
  SERVICE_NAME: e90-final                 # set this to your Amazon AppRunner service name
  GCP_REGION: us-east4
  GCP_PROJECT_ID: ranciato-e90-final-project

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Test
      run: |
        # Tests would normally go here
        echo "Tests passed"

    - uses: actions/cache@v2
      id: restore-build
      with:
        path: ./*
        key: ${{ github.sha }}

  deployaws:
    needs: build
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/cache@v2
      id: restore-build
      with:
        path: ./*
        key: ${{ github.sha }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon Elastic Container Registry
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploygcp:
    needs: build
    name: Deploy to GCP
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/cache@v2
      id: restore-build
      with:
        path: ./*
        key: ${{ github.sha }}
        
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_GH_BUILDER_KEY }}
    
    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - name: Authorize Docker
      run: |-
        gcloud --quiet auth configure-docker

    - name: Build, tag, and push image to Google Cloud Artifact Registry
      id: build-image
      env:
        GCP_REGISTRY: ${{ env.GCP_REGISTRY }}
        GCP_REPOSITORY: ${{ env.GCP_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to GCP
        docker build -t $GCP_REGISTRY/$GCP_REPOSITORY:$IMAGE_TAG .
        docker push $GCP_REGISTRY/$GCP_REPOSITORY:$IMAGE_TAG
        docker tag $GCP_REGISTRY/$GCP_REPOSITORY:$IMAGE_TAG $GCP_REGISTRY/$GCP_REPOSITORY:latest
        docker push $GCP_REGISTRY/$GCP_REPOSITORY:latest
        echo "::set-output name=image::$GCP_REGISTRY/$GCP_REPOSITORY:$IMAGE_TAG"
